import { GoogleGenAI, Type } from "@google/genai";
import type { Recipe } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const recipeSchema = {
  type: Type.ARRAY,
  items: {
    type: Type.OBJECT,
    properties: {
      recipeName: {
        type: Type.STRING,
        description: 'The name of the recipe.',
      },
      description: {
        type: Type.STRING,
        description: 'A brief, appetizing description of the dish in 1-2 sentences.'
      },
       time: {
        type: Type.STRING,
        description: 'Estimated total time, e.g., "25 Mins" or "1 Hour"',
      },
      servings: {
        type: Type.STRING,
        description: 'Number of servings, e.g., "2" or "4-6"',
      },
      difficulty: {
        type: Type.STRING,
        description: 'Difficulty level: "Easy", "Medium", or "Hard"',
      },
      ingredients: {
        type: Type.ARRAY,
        items: {
          type: Type.STRING,
        },
        description: 'A list of all ingredients required for the recipe.',
      },
      instructions: {
        type: Type.ARRAY,
        items: {
            type: Type.STRING
        },
        description: 'Step-by-step instructions to prepare the dish.',
      },
    },
    required: ["recipeName", "description", "time", "servings", "difficulty", "ingredients", "instructions"],
  },
};


export const generateRecipes = async (prompt: string): Promise<Recipe[]> => {
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: `Based on the ingredients I have, which are: "${prompt}", please generate 2 creative recipe ideas.`,
      config: {
        systemInstruction: "You are a creative chef that generates delicious and practical recipes based on a user's available ingredients. Provide clear instructions and complete ingredient lists. If the user provides very few ingredients, suggest simple recipes or what key items they might add to make a full meal.",
        responseMimeType: "application/json",
        responseSchema: recipeSchema,
      },
    });

    const jsonText = response.text.trim();
    if (!jsonText) {
        throw new Error("The API returned an empty response. Try being more specific with your ingredients.");
    }

    const recipes = JSON.parse(jsonText) as Recipe[];
    return recipes;

  } catch (error) {
    console.error("Error generating recipes:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to generate recipes. ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating recipes.");
  }
};


export const generateRecipeImage = async (recipeName: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: `A delicious, professional, vibrant food photograph of "${recipeName}". The dish is presented beautifully on a clean, minimalist plate against a simple, out-of-focus background. Shot with a shallow depth of field.`,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '4:3',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        }
        throw new Error('No image was generated by the API.');

    } catch (error) {
        console.error("Error generating image:", error);
        // Return a placeholder or throw error
        throw new Error('Failed to generate recipe image.');
    }
};